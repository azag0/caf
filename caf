#!/usr/bin/env python3
"""caf -- Calculation framework.

Usage:
    caf build [new] [REMOTE]
    caf work (local | REMOTE) [TARGET...] [-p PROFILE] [--id ID] [-j N]
    caf remote add URL [NAME]
    caf fetch REMOTE [TARGET...]
    caf status [REMOTE]

Commands:

Options:
    -p, --profile PROFILE      Run worker via ~/.caf/worker_PROFILE.
    -j N                       Number of launched workers [default: 1].
    --id ID                    ID of worker [default: 1].
"""
from docopt import docopt
from pathlib import Path
import os
import sys

from caflib.Core import Configuration

out = Path('build')
latest = 'Latest'
cache = Path('_caf')


def load_cscript():
    import imp
    cscript = imp.new_module('cscript')
    try:
        exec(compile(open('cscript').read(), 'cscript', 'exec'), cscript.__dict__)
    except:
        import traceback
        import sys
        print('There was an error while reading cscript.')
        traceback.print_exc()
        sys.exit(1)
    return cscript


if __name__ == '__main__':
    args = docopt(__doc__)
    if args['REMOTE']:
        import caflib.Remote as Remote
        remote_conf = Configuration('.caf/remotes.yaml')
        remote = remote_conf[args['REMOTE']]
    else:
        remote = None
    if args['build']:
        if remote:
            Remote.upload(**remote)
            command = 'build new' if args['new'] else 'build'
            Remote.command(command, **remote)
            sys.exit()
        else:
            from datetime import datetime
            from caflib.Core import Context, mkdir
            cscript = load_cscript()
            ctx = Context()
            cscript.build(ctx)
            if args['new']:
                timestamp = format(datetime.today(), '%Y-%m-%d_%H:%M:%S')
            else:
                timestamp = os.readlink(str(out/latest))
            if not cache.is_symlink():
                conf = Configuration(os.environ['HOME'] + '/.caf/conf.yaml')
                cachepath = Path(conf['cache'])/'{}_{}'.format(Path().resolve().name, timestamp)
                cachepath.mkdir()
                cache.symlink_to(cachepath)
            mkdir(cache/'Brewery')
            os.system('ln -fns {} {}'.format(timestamp, cache/'Brewery'/latest))
            ctx.build(cache.resolve(), timestamp)
            mkdir(out)
            os.system('ln -fns {} {}'.format(timestamp, out/latest))
            ctx.make_targets(out/timestamp)
            sys.exit()
    if args['work']:
        if remote:
            Remote.upload(**remote)
            command = 'work local {} -j {}'.format(' '.join(args['TARGET']),
                                                   args['-j'])
            if args['--profile']:
                command += ' -p ' + args['--profile']
            Remote.command(command, **remote)
            sys.exit()
        else:
            if args['--profile']:
                import subprocess
                for _ in range(int(args['-j'])):
                    subprocess.check_call('~/.caf/worker_{} {}'
                                          .format(args['--profile'],
                                                  ' '.join(args['TARGET'])),
                                          shell=True)
                sys.exit()
            else:
                from caflib.Worker import Worker
                worker = Worker(args['--id'], out/latest)
                worker.work(args['TARGET'])
                sys.exit()
    if args['remote']:
        if args['add']:
            conf = Configuration('.caf/remotes.yaml')
            host, path = args['URL'].split(':')
            name = args['NAME'] or host
            conf[name] = {'host': host, 'path': path}
            conf.save()
            sys.exit()
    if args['fetch']:
        from caflib.Core import cellar
        Remote.fetch(args['TARGET'],
                     cellar=cache/cellar,
                     build=out/latest,
                     **remote)
        sys.exit()
    if args['status']:
        if remote:
            Remote.command('status', **remote)
            sys.exit()
        else:
            from caflib.Core import check, brewery
            check(cache/brewery/latest)
            sys.exit()
