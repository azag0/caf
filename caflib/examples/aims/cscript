from caflib.Tools.aims import AimsCalculation, parse_output, parse_xml
from caflib.Tools.geomlib import Atom, Molecule



def prepare_mbd(task):
    data = pickle.load(open('data.p', 'rb'))
    geom = Molecule([Atom(specie, xyz)
                     for specie, xyz
                     in zip(data['xml']['species'], data['xml']['xyz'])])
    geom_task = task['geom']
    if geom_task:
        assert geom == geom_task
    geom.write('geom.xyz')
    inp = {}
    inp['volume_ratio'] = data['xml']['volume_ratio']
    if 'unit_cell' in data['xml']:
        inp['unit_cell'] = data['xml']['unit_cell']
        inp['k_grid'] = task['k_grid']
    with open('input.json', 'w') as f:
        json.dump(inp, f, indent=4, sort_keys=True)


def chain_aims_mbd(ctx, geom):
    return ctx(features='aims',
               basis='light',
               geom=geom) \
        + ctx.link('aims', ['run.out', 'results.xml']) \
        + ctx(files='caflib/Scripts/extract_aims.py',
              command='./extract_aims.py run.out') \
        + ctx.link('data', 'data.p') \
        + ctx(features=prepare_mbd,
              geom=geom,
              k_grid=[1, 1, 4],
              command='run_mbd input.json')




top = '..'


def prepare(ctx):
    for xc in ['pbe0', 'pbe']:
        for dist in [3.5, 4, 5]:
            geom = Molecule([Atom('Ar', (0, 0, 0)),
                             Atom('Ar', (dist, 0, 0))])
            calc = AimsCalculation(basis='light',
                                   xc=xc,
                                   geom=geom.dumps('fhiaims'))
            ctx.add_task(calc, xc=xc, dist=dist)


def extract(ctx):
    results = {}
    results['output'] = parse_output('run.out')
    results['xml'] = parse_xml('results.xml')
    return results


def process(ctx):
    with open('results.txt', 'w') as f:
        for param, data in ctx.results:
            f.write('{}\n'.format(param))
            for key, value in data['output'].items():
                f.write('{}\n'.format(key))
                f.write('{}\n'.format(value))
            for key, value in data['xml'].items():
                f.write('{}\n'.format(key))
                f.write('{}\n'.format(value))
